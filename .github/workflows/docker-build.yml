name: Build and Publish Docker Images

on:
  push:
    branches: [main, develop]
    paths:
      - 'docker/**'
      - 'micropython/**'
      - '.github/workflows/docker-build.yml'
  pull_request:
    branches: [main]
    paths:
      - 'docker/**'
      - 'micropython/**'
      - '.github/workflows/docker-build.yml'
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild all images'
        required: false
        default: 'false'

env:
  REGISTRY: ghcr.io
  BASE_IMAGE_NAME: ghcr.io/belay-dotnet

jobs:
  build-base:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      build-base-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata for build-base
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.BASE_IMAGE_NAME }}/belay-build-base
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: Build and push build-base image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/build-base/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-test:
    runs-on: ubuntu-latest
    needs: build-base
    permissions:
      contents: read
      packages: write
    outputs:
      test-base-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata for test-base
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.BASE_IMAGE_NAME }}/belay-test-base
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: Build and push test-base image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/test-base/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_CONTEXT_KEEP_GIT_DIR=1

  build-docs:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      docs-base-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata for docs-base
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.BASE_IMAGE_NAME }}/belay-docs-base
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: Build and push docs-base image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/docs-base/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-dev:
    runs-on: ubuntu-latest
    needs: build-test
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata for dev image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.BASE_IMAGE_NAME }}/belay-dev
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: Build and push dev image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/dev/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest
    needs: [build-base, build-test, build-docs]
    if: github.event_name == 'pull_request'
    permissions:
      security-events: write
    steps:
      - name: Run Trivy vulnerability scanner on build-base
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.BASE_IMAGE_NAME }}/belay-build-base:${{ github.head_ref || github.ref_name }}
          format: 'sarif'
          output: 'trivy-build-base.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-build-base.sarif'